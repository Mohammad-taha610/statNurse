<?php

namespace sa\messages;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use sacore\application\DefaultRepository;

/**
 * saEmailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class saEmailRepository extends DefaultRepository
{

//    public function search($fieldsToSearch, $orderBy=null, $perPage=null, $offset=null) {
//        $query = $this->createQueryBuilder('q');
//
//        if ($orderBy)
//            $query->orderBy($orderBy);
//
//        if ($perPage) {
//            $query->setMaxResults($perPage);
//        }
//
//        if ($offset) {
//            $query->setFirstResult($offset);
//        }
//
//        if (is_array($fieldsToSearch) ) {
//            foreach ($fieldsToSearch as $f => $v) {
//                $query->andWhere('q.' . $f . ' LIKE :' . $f);
//                $query->setParameter(':' . $f, '%' . $v . '%');
//            }
//        }
//
//
//        return $query->getQuery()->getResult();
//    }

    public function getUnsuccessfulCount() {
        $qb = $this->createQueryBuilder('m');
        $qb->select('COUNT(m)');
        $qb->where('m.attempted_send = 0 OR m.success = 0');
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @return mixed
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function getNotAttemptedCount()
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('COUNT(m)');
        $qb->where('m.attempted_send = 0');
        $qb->andWhere($qb->expr()->orX(
            $qb->expr()->isNull('m.central_acknowledged'),
            $qb->expr()->eq('m.central_acknowledged', '0')
        ));

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @return mixed
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function getFailedDeliveryCount()
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('COUNT(m)');
        $qb->where('m.success = 0');
        $qb->andWhere($qb->expr()->orX(
            $qb->expr()->isNull('m.central_acknowledged'),
            $qb->expr()->eq('m.central_acknowledged', '0')
        ));

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getNewCount($batch_id = null)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('COUNT(m)');
        $qb->where('m.attempted_send = 0');
        if ($batch_id) {
            $qb->andWhere('m.batch_id = :batch_id');
            $qb->setParameter(':batch_id', $batch_id);
        }
        else
        {
            $qb->andWhere('m.batch_id is null');
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getNew( $batch_id=null, $limit=50, $offset=0 ) {
        $qb = $this->createQueryBuilder('m');
        $qb->where('m.attempted_send = 0');
        if ($batch_id) {
            $qb->andWhere('m.batch_id = :batch_id');
            $qb->setParameter(':batch_id', $batch_id);
        }
        else
        {
            $qb->andWhere('m.batch_id is null');
        }
        $qb->setMaxResults($limit);
        $qb->setFirstResult($offset);
        return $qb->getQuery()->getResult();
    }
    
    public function getEmails($count = false, $limit=100, $offset=0, $sortBy = 'date_created', $sortDir = 'ASC', $fieldsToSearch = []) {
        $qb = $this->createQueryBuilder('m');
        foreach ($fieldsToSearch as $f => $v) {
            $qb->andWhere('m.' . $f . ' LIKE :' . $f);
            $qb->setParameter(':' . $f, '%' . $v . '%');
        }

        if($count) {
            $qb->select('COUNT(m.id)');
            return $qb->getQuery()->getSingleScalarResult();
        }
        else {
            $qb->select('m');
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
            $qb->orderBy('m.' . $sortBy,$sortDir);
            return $qb->getQuery()->getResult();
        }
    }

}
