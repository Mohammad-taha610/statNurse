<?php

namespace sa\files;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use sacore\application\app;
use sacore\application\DefaultRepository;
use sacore\utilities\doctrineUtils;

/**
 * saFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below
 */
class saFileRepository extends DefaultRepository {

    /**
     * Return a list of files that begin with and match a given extension
     * 
     * @param string $beginsWith
     * @param string $extension
     * 
     * @return ArrayCollection
     */
    public function matchesFilesLike($beginsWith, $extension, $folder = null, $hydration = Query::HYDRATE_OBJECT) {
        $extension = ltrim($extension, '.');
        
        $q = $this->createQueryBuilder('file');
        
        $q->where('file.filename LIKE :beginsWith');
        $q->setParameter(':beginsWith', $beginsWith .'%');
        $q->andWhere('file.filename LIKE :extension');
        $q->setParameter(':extension', '%.' . $extension);
        $q->andWhere('file.filename_key = :first7');
        $q->setParameter(':first7', substr($beginsWith, 0, 7));
        $q->andWhere('file.complete_file = true');
        
        if($folder) {
            $q->andWhere('file.folder = :folder');
            $q->setParameter(':folder', $folder);
        }
        
        return $q->getQuery()->getResult($hydration);
    }
    
    public function getFilesByFolder($asArray=false, $folderFilter=null, $offset=null, $limit=null) {
        $filterCriteria = array();

        if ($folderFilter != null) {
            $filterCriteria['folder'] = $folderFilter;
        }

        $files = $this->findBy( $filterCriteria, array('folder'=>'ASC', 'filename'=>'ASC'), $limit, $offset );

        $folders = array();

        foreach($files as $file) {

            if ($folderFilter && $folderFilter==$file->getFolder())
                $folders[ $file->getFolder() ][] = $asArray ? doctrineUtils::convertEntityToArray($file) : $file;
            elseif (!$folderFilter)
                $folders[ $file->getFolder() ][] = $asArray ? doctrineUtils::convertEntityToArray($file) : $file;
        }

        return $folders;
    }

    public function getFilesInFolder($folder=null, $offset=null, $limit=null, $search=null, $onlyOriginal = false) {
        $queryString = 'SELECT id FROM sa_file ';
        $paramCount = 0;
        
        $rsm = new Query\ResultSetMapping();
        $rsm->addEntityResult('\sa\files\saFile', 'file');
        $rsm->addFieldResult('file', 'id', 'id');
        
        $query = $this->getEntityManager()->createNativeQuery($queryString, $rsm);
        
        if($folder) {
            $paramCount++;
            
            $curSql = $query->getSQL();
            
            $query->setSQL($curSql . 'WHERE folder = ?');
            $query->setParameter($paramCount, $folder);
        }
        
        if($search) {
            $paramCount++;
            $curSql = $query->getSQL();
            
            $query->setSQL($curSql . ($paramCount >= 1 ? ' AND ' : ' WHERE ') . 'filename LIKE ?');
            $query->setParameter($paramCount, '%' . $search . '%');
        }

        if($onlyOriginal) {
            $curSql = $query->getSQL();
            $query->setSQL($curSql . ($paramCount >= 1 ? ' AND ' : ' WHERE ') . 'original_id IS NULL');
        }
        
        $curSql = $query->getSQL();
        $query->setSQL($curSql . ' ORDER BY folder ASC, filename ASC');
        
        if($limit) {
            $paramCount++;
            $curSql = $query->getSQL();

            $configuration = app::get()->getConfiguration();

            $dbDriver = $configuration->get('db_driver')->getValue();

            // TODO : DQL DOES A TERRIBLE JOB WITH INHERITANCE IN THIS CASE, SO KEEP RAW SQL STATEMENT,
            //        AND ADAPT QUERY TO SUPPORT FETCH NEXT - ROWS ONLY SYNTAX.
            //        REQUIRES SQLSRV Version >= 2012

            if($dbDriver == 'pdo_sqlsrv') {
                $query->setSQL($curSql . ' OFFSET ? ROWS');
                $query->setParameter($paramCount, (int) $offset);

                $paramCount++;

                $curSql = $query->getSQL();

                $query->setSql($curSql . ' FETCH NEXT ? ROWS ONLY');
                $query->setParameter($paramCount, $limit);
            } else {
                $query->setSQL($curSql . ' LIMIT ?');
                $query->setParameter($paramCount, $limit);

                $paramCount++;

                $curSql = $query->getSQL();

                $query->setSql($curSql . ' OFFSET ?');
                $query->setParameter($paramCount, (int) $offset);
            }
        }
        
        $queryResult = $query->getResult();
        $objectReturn = array();
        $objIdArray = array();
        
        if($queryResult) {
            /** @var saFile $partialEntity */
            foreach($queryResult as $partialEntity) {
                $objIdArray[] = $partialEntity->getId();
            }
        }
        
        $this->getEntityManager()->clear();
        
        if(count($objIdArray)) {
            $objectReturn = $this->findBy(array('id' => $objIdArray), array('folder' => 'ASC', 'filename' => 'ASC'));
        }
        
//        $query = $this->createQueryBuilder('q');
//        $query->distinct(true)
//                ->orderBy('q.folder', 'ASC')
//                ->addOrderBy('q.filename', 'ASC');
//
//
//        if ($folder) {
//            $queryString .= 'WHERE folder = ? ';
//            
//            $query->andWhere( 'q.folder=:folder' );
//            $query->setParameter(':folder', $folder);
//        }
//
//        if ($search) {
//            $queryString .= ' AND filename LIKE %?%';
//            
//            $query->andWhere( 'q.filename LIKE :search' );
//            $query->setParameter(':search', '%'.$search.'%');
//        }
//
//        if ($limit) {
//            $query->setMaxResults($limit)
//                    ->setFirstResult($offset);
//        }

        
        return $objectReturn;
    }

    public function getFolders() {


        $query = $this->createQueryBuilder('q');
        $query->select('q.folder');
        $query->distinct(true);
        $query->orderBy('q.folder', 'ASC');

        $folders = array();


        $result = $query->getQuery()->getResult();

        foreach($result as $row) {

            $folders[] = $row['folder'];
        }


        return $folders;
    }


    public function dataTablesRequest( $member, $search=null, $draw=0, $start=0, $length=999999, $sort=null, $sortDir='ASC' ) {

        $sortColumnDefinitions = array(
            'a.label',
            'a.filename',
            ''
        );

        $q = $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->distinct();

        $recordsTotal = $q->getQuery()->getSingleScalarResult();

        //$this->addSearchParams($q, $search);

        $recordsTotalAfterFiltering = $q->getQuery()->getSingleScalarResult();

        $q->select('a');
        $q->setFirstResult($start);
        $q->setMaxResults($length);

        if ($sort!==null) {
            $q->orderBy($sortColumnDefinitions[$sort], $sortDir);
        }


        $result = $q->getQuery()->getResult();

        $return = array( 'data'=> array(), 'draw'=>(int)$draw, 'recordsTotal'=>$recordsTotal, 'recordsFiltered'=>$recordsTotalAfterFiltering, 'search'=>$search );
        /** @var saFile $r */
        foreach( $result as $r ) {


            $label = $r->getLabel();
            $label = !empty($label) ? $label : 'Not Labeled';

            $data = array(
                $label,
                $r->getFilename(),
                $r->getId()
            );
            $return['data'][] = $data;
        }

        return $return;
    }
}
