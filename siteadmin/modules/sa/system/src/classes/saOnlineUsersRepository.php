<?php

namespace sa\system;

use sacore\application\DateTime;

/**
 * saCityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class saOnlineUsersRepository extends \Doctrine\ORM\EntityRepository
{

    public function getOnlineUsersCountInTimeframe($start_time, $end_time, $was_active=false) {

        $query = $this->createQueryBuilder('q');

        $query->select('COUNT(q.id) AS total')
        ->andWhere('q.last_visit_date >= :start_time')
        ->andWhere('q.last_visit_date <= :end_time')
        ->setParameter(':start_time', $start_time)
        ->setParameter(':end_time', $end_time);


        if ($was_active) {

        	$query->andWhere('(q.was_idle = false OR q.was_page_load=true)');

        }

        return $query->getQuery()->getSingleResult();
    }
    
    /**'
     * @param \sacore\application\DateTime $minVisitDate
     * @param \sacore\application\DateTime $maxVisitDate
     * @return OnlineUser
     */
    public function getCurrentOnlineUser($minVisitDate = null, $maxVisitDate = null)
    {
        $minVisitDate = new DateTime();
        $minVisitDate->setTime(0, 0, 0);
        $maxVisitDate = new DateTime();
        $maxVisitDate->setTime(23, 59, 59);

        /** @var OnlineUser $online_user */
        $qb = $this->createQueryBuilder('o');
        $qb->where('o.machineId=:id AND o.last_visit_date>=:date1 and o.last_visit_date<=:date2');
        $qb->setParameter(':id', saAuth::getMachineUUID());
        $qb->setParameter(':date1', $minVisitDate);
        $qb->setParameter(':date2', $maxVisitDate);
        $qb->setMaxResults(1);
        $online_user = $qb->getQuery()->getOneOrNullResult();

        return $online_user;
    }

}
