<?php

namespace sa\system;
use Doctrine\ORM\NoResultException;
use sacore\application\ioc;
use \sacore\application\app;
use sacore\utilities\doctrineUtils;
use stdClass;

/**
 * saPostalCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class saPostalCodeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPostalCodeByState($state) {

        if ( $state ) {
            $query = $this->createQueryBuilder('q');

            $query->join('q.city', 'ci')
                ->join('ci.county', 'co')
                ->join('co.state', 's')
                ->where('s.id=:state')
                ->setParameter(':state', $state->getId())
                ->orderBy('q.code', 'ASC');

            return $query->getQuery()->getResult();
        }

        return null;
    }

    public function findPostalCodeState($postal_code = '') {

        $r = null;

        if ( $postal_code ) {
            $q = $this->createQueryBuilder('a')
                ->select('s.abbreviation, s.name')
                ->join('a.city', 'ci')
                ->join('ci.county', 'co')
                ->join('co.state', 's')
                ->where('a.code=:postal_code')
                ->setParameter(':postal_code', $postal_code);

            //echo $q->getQuery()->getSQL();exit;

            try {
                $r = $q->getQuery()->getArrayResult(); // return hydrated array
            }
            catch(NoResultException $e) {

            }
        }

        return $r;

    }

    public function findCitiesPostalCodeState($state = '') {

        $r = null;

        if ( $state ) {
            $q = $this->createQueryBuilder('a')
                ->select('a.code, ci.name')
                ->join('a.city', 'ci')
                ->join('ci.county', 'co')
                ->join('co.state', 's')
                ->where('s.abbreviation=:state')
                ->setParameter(':state', $state)
                ->orderBy('a.code');

            //echo $q->getQuery()->getSQL();exit;

            try {
                $r = $q->getQuery()->getArrayResult(); // return hydrated array
            }
            catch(NoResultException $e) {

            }
        }

        return $r;

    }

    /**
     * Attempt to resolve a postal code if a regular DB lookup fails.
     * ----------
     *
     * @param string $postalCode - The postal code string to match.
     *
     * @param saCountry $country - Used for smart matching on some countries.
     *
     * @return null|saPostalCode
     */
    public function resolveMissingPostalCode($postalCode, $country)
    {
        /** @var saPostalCode $resolvedPostalCode */
        $resolvedPostalCode = null;

        // Postal codes are stored with only prefixes in the database
        if($country->getAbbreviation() == 'CA') {
            $resolvedPostalCode = $this->resolveInternationalPostalCode($postalCode);
        }

        if(!$resolvedPostalCode) {
            $resolvedPostalCode = $this->geocodePostCode($postalCode, $country ? $country->getAbbreviation() : null);
        } else {
        }

        return $resolvedPostalCode;
    }

    /**
     * Return a pseudo Postal Code entity using
     * prefix matching.
     *
     * @param $postalCode
     * @return mixed
     */
    private function resolveInternationalPostalCode($postalCode)
    {
        $postCodeQuery = $this->createQueryBuilder('postalCode');
        $postCodeQuery->join('postalCode.state', 'state');
        $postCodeQuery->join('state.country', 'country');
        $postCodeQuery->where($postCodeQuery->expr()->andX(
            'postalCode.code = :postalCodePrefix'
        ));
        $postCodeQuery->setParameters(array(
            ':postalCodePrefix' => $postalCode
        ));

        $matchedInternationalPostCode = $postCodeQuery->getQuery()->getOneOrNullResult();
        return $matchedInternationalPostCode;
    }

    /**
     * @param $postalCode
     * @param $country
     * @return null
     */
    private function geocodePostCode($postalCode, $country = null)
    {
        $addressReturn = $this->curlGetAddressData($postalCode . ' ' . $country);

        if(empty($addressReturn)) {
            return null;
        } else if($addressReturn->status != 'OK') {
            return null;
        }

        return $this->pseudoAddressFromAddressReturn($addressReturn, $postalCode);
    }

    /**
     * @param stdClass $data
     * @return null|saPostalCode
     */
    public function pseudoAddressFromAddressReturn($data, $originalPostalCode)
    {
        /** @var saPostalCode $pseudoPostalCode */
        $pseudoPostalCode = ioc::resolve('saPostalCode');
        /** @var saCounty $pseudoCounty */
        $pseudoCounty = ioc::resolve('saCounty');
        /** @var saState $pseudoState */
        $pseudoState = ioc::resolve('saState');
        /** @var saCountry $pseudoCountry */
        $pseudoCountry = ioc::resolve('saCountry');
        /** @var saCity $pseudoCity */
        $pseudoCity = ioc::resolve('saCity');

        $existingCountry = null;
        $existingState = null;
        $existingCounty= null;
        $existingCity = null;

        foreach($data->results[0]->address_components as $component) {
            foreach($component->types as $type) {
                if($type == 'country') { // Country
                    $pseudoCountry->setName($component->long_name);
                    $pseudoCountry->setAbbreviation($component->short_name);

                    $existingCountry = ioc::getRepository("saCountry")->findOneBy(array("name" => $component->long_name, "abbreviation" => $component->short_name));


                } else if($type == 'administrative_area_level_1') { // State
                    $pseudoState->setName($component->long_name);
                    $pseudoState->setAbbreviation($component->short_name);

                    $existingState = ioc::getRepository("saState")->findOneBy(array("name" => $component->long_name, "abbreviation" => $component->short_name));

                } else if($type == 'administrative_area_level_2') { // County
                    $pseudoCounty->setName($component->long_name);

                } else if($type == 'locality') { // City
                    $pseudoCity->setName($component->long_name);

                } else if($type == 'postal_code') {
                    $pseudoPostalCode->setCode(strtoupper(str_replace(' ','',$component->long_name)));
                }
            }
        }

        // Canada results do not include full postal code, so check result and store original input instead
        if($pseudoCountry && $pseudoCountry->getAbbreviation() == 'CA') {
            if(substr($pseudoPostalCode->getCode(),0,3) == substr($originalPostalCode, 0, 3)) {
                $pseudoPostalCode->setCode(strtoupper(str_replace(' ','',$originalPostalCode)));
            }
        }

        if(empty($pseudoCountry->getName()) ||
            empty($pseudoState->getName()) ||
            empty($pseudoCounty->getName()) ||
            empty($pseudoCity->getName()) ||
            empty($pseudoPostalCode->getCode())
        ) {
            return null;
        }

        $existingLat = null;
        $existingLng = null;
        if($data->results[0]->geometry->location) {
            $existingLat = $data->results[0]->geometry->location->lat;
            $existingLng = $data->results[0]->geometry->location->lng;
        }

        if($existingCountry && $existingState && $existingLat && $existingLng) {
            $existsCheck = ioc::getRepository("saPostalCode")->findOneBy(array('code' => $pseudoPostalCode->getCode()));
            if(!$existsCheck) {
                $pseudoPostalCode->setCity(null);
                $pseudoPostalCode->setState($existingState);
                $pseudoPostalCode->setLatitude($existingLat);
                $pseudoPostalCode->setLongitude($existingLng);
                app::$entityManager->persist($pseudoPostalCode);
                app::$entityManager->flush($pseudoPostalCode);
                app::$entityManager->detach($pseudoPostalCode);
            }
        }

        $pseudoPostalCode->setCity($pseudoCity);
        $pseudoPostalCode->setState($pseudoState);
        $pseudoCounty->setState($pseudoState);
        $pseudoState->setCountry($pseudoCountry);
        $pseudoCity->setState($pseudoState);
        $pseudoCity->setCounty($pseudoCounty);

        return $pseudoPostalCode;
    }

    /**
     * @param $addressQuery
     * @return mixed
     */
    public function curlGetAddressData($addressQuery)
    {
        $googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json?address=' . urlencode($addressQuery);

        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, $googleApiUrl);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

        $result = curl_exec($curl);
        curl_close($curl);

        $result = json_decode($result);

        return $result;
    }
}
