<?php

namespace sa\system;

use Doctrine\ORM\EntityRepository;
use sacore\application\app;
use sacore\application\moduleConfig;

/**
 * saUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class saUserRepository extends \sacore\application\DefaultRepository
{

    public function getUserByUsername($username, $is_active=true, $type=saUser::TYPE_LOGIN_LOCAL) {
        $query = $this->createQueryBuilder('q');


        $query->where('q.username = :username and q.is_active=:is_active');
        $query->setParameter(':username', $username);
        $query->setParameter(':is_active', $is_active);

        if ($type=='local') {
            $query->andWhere('q.login_type is null or q.login_type = :login_type');
        }
        else
        {
            $query->andWhere('q.login_type = :login_type');
        }
        $query->setParameter(':login_type', $type);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function search($fieldsToSearch, $orderBy = NULL, $perPage = NULL, $offset = NULL, $count = false, $secondary_sort = NULL, $where_andor = 'and', $search_start = true, $search_end = true) {
        $query = $this->createQueryBuilder('q');

        if ($orderBy) {
            foreach($orderBy as $f=>$d) {
                $query->addOrderBy('q.'.$f, $d);
            }
        }

        if ($secondary_sort) {
            foreach($secondary_sort as $f=>$d) {
                $query->addOrderBy('q.'.$f, $d);
            }
        }

        if ($perPage) {
            $query->setMaxResults($perPage);
        }

        if ($offset) {
            $query->setFirstResult($offset);
        }

        if (is_array($fieldsToSearch) ) {
            foreach ($fieldsToSearch as $f => $v) {
                if($where_andor == 'or') {
                    $query->orWhere('q.' . $f . ' LIKE :' . $f);
                }
                else {
                    $query->andWhere('q.' . $f . ' LIKE :' . $f);
                }
                $query->setParameter(':' . $f, '%' . $v . '%');
            }
        }

        $query->andWhere('(q.login_type <> :login_type OR q.login_type is null)');
        $query->setParameter(':login_type', saUser::TYPE_LOGIN_REMOTE);

        if($count) {
            $query->select('count(q.id)');
            return $query->getQuery()->getSingleScalarResult();
        }
        else
            return $query->getQuery()->getResult();
    }

    /**
     * Filters permissions for a user 
     * to prevent self-elevation of access.
     * 
     * For example, users should not be able to create new
     * users that would elevate their current access level.
     * 
     * Similarly, users should also not be able to add 
     * permissions to their own account that would elevate their access level.
     * 
     * @param saUser $user
     * @return array
     */
    public function filterPermissionsFor($user) 
    {
        $allPermissions = $this->gatherModulePermissions();
        $curPermissions = $user->getPermissions();
        
        if($user->getUserType() == saUser::TYPE_DEVELOPER || $user->getUserType() == saUser::TYPE_SUPER_USER) {
            return $allPermissions;
        }
        
        $permissions = array();
        
        foreach($allPermissions as $module => $permissionSet) {
            $curModPermissions = $curPermissions[$module];
            
            foreach($permissionSet as $permission => $value) {
                if(!in_array($permission, $curModPermissions) || $curModPermissions[$permission] == false) {
                    continue;
                }
                
                $permissions[$module][$permission] = $value;
            }
        }
        
        return $permissions;
    }
    
    private function gatherModulePermissions()
    {
        $modules = app::get()->getModules();
        foreach($modules as $mod) {
            /** @var moduleConfig $config */
            $config = '\\'.$mod['namespace'].'\\'.$mod['module'].'Config';
            $permissions[ $mod['module'] ] = $config::getPermissions();
        }

        ksort($permissions);
        
        return $permissions;
    }
}
